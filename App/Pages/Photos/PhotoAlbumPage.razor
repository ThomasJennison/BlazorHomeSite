@page "/photoAlbumPage/{AlbumId}"
@using BlazorHomeSite.Components.Photos
@using BlazorHomeSite.Data.Photos;
@using BlazorHomeSite.Data.SiteOwners;
@using System.Collections.Concurrent;
@using BlazorHomeSite.Services.Database;
@using BlazorHomeSite.Services.Photos.PhotoAlbums;
@using BlazorHomeSite.Services.Photos;
@using BlazorHomeSite.Services.SiteOwners;
@using Microsoft.EntityFrameworkCore;
@inject ISiteOwnerService SiteSettings;
@inject IPhotoAlbumService PhotoAlbumService;
@inject IUploadPhotoService PhotoUploadService;
@inject IPhotosService PhotoService

<PageTitle>@_pageTitle</PageTitle>

<MudStack>
    <CascadingAuthenticationState>
        <AuthorizeView Roles="Admin">
            <MultiPhotoUpload AlbumId="@AlbumId" />
            <PhotoAlbumEditor AlbumId="@AlbumId" />
        </AuthorizeView>
    </CascadingAuthenticationState>

    <MudGrid>
        @if (loading)
        {
            <MudItem xs="12">
                <MudText>Loading.....</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudProgressCircular Indeterminate=true />
            </MudItem>
        }
        else
        {
            @foreach (var photo in PhotosInView)
            {
                <MudItem xs="2">
                    <PhotoView PhotoId="@photo.Key" Thumbnail=true B64="@photo.Value" />
                </MudItem>
            }
        }
    </MudGrid>
    <MudPagination Count="@totalPages" Selected="@_page" Variant="Variant.Filled" Color="Color.Secondary"
                   SelectedChanged="async (id)=> await OnPageChange(id)" Class="flex-fill">

    </MudPagination>

</MudStack>
@code {
    [Parameter]
    public string? AlbumId { get; set; }
    PhotoAlbum? _photoAlbum = null;
    Dictionary<int, string> PhotosInView = new();

    string _pageTitle = "";
    int parsedAlbumId = -1;
    int _page = 1;
    int photosPerPage = 25;
    int totalPages = 99;
    bool loading = true;

    private async Task OnPageChange(int page)
    {
        _page = page;
        await SetPhotosInView(_page);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        parsedAlbumId = int.Parse(AlbumId ?? "-1");
        _photoAlbum = await PhotoAlbumService.GetPhotoAlbumByIdAsync(parsedAlbumId);

        if (_photoAlbum != null)
        {
            _pageTitle = $"Photo Album: {_photoAlbum.Name}";
            var totalPhotos = await PhotoService.GetPagesForAlbum(parsedAlbumId);
            totalPages = (int)(totalPages / photosPerPage);

            await SetPhotosInView(1);
        }
    }

    private async Task SetPhotosInView(int page)
    {
        loading = true;
        PhotosInView.Clear();
        PhotosInView = await PhotoService.GetB64ImagesByPage(parsedAlbumId, page, photosPerPage);
        loading = false;
    }
}